# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере.
# Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована.
# Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
# При этом скрипт завершается, сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список, только если введено число.
# Класс-исключение должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение.
# При этом работа скрипта не должна завершаться.

class Err(Exception):
    def __init__(self, *args):
        self.my_list = []

    def get_numbers(self):
        while True:
            try:
                number = float(input("Введите значение: "))
                self.my_list.append(number)
                print(f'Текущий список: {self.my_list}')
            except:
                print("Недопустимое значение, принимаются только числа!")
                more = input('Продолжить ввод значений? Введите "Y" чтобы продолжить или другое значение для завершения: ')

                if more == 'Y' or more == 'y':
                    continue
                else:
                    return f'Вы вышли. Текущий список: {self.my_list}'

my_err = Err()
print(my_err.get_numbers())